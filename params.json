{"name":"NioClient","tagline":"Simple Java NIO wrapper for client applications","body":"NioClient\r\n=========\r\n\r\nNetty is a brilliant framework for server applications, but it's kind of heavy for client side, NioClient wants to provides serveral light classes to use nonblocking socket.\r\n\r\nSome of idea is coming from Netty, but I try to make it simple.\r\n\r\nThere are also some references (thanks to authors for sharing):\r\n\r\n1. http://rox-xmlrpc.sourceforge.net/niotut/\r\n2. http://today.java.net/article/2007/02/08/architecture-highly-scalable-nio-based-server\r\n\r\nThread model\r\n=========\r\n1. there are always two threads running after NioManager.init(), one is selector thread, another is I/O thread.\r\n2. all operations of selector key set will be processed in selector thread.\r\n3. all handler's callback will be called in I/O thread.\r\n\r\nUsage\r\n=========\r\nplease check NioDemo class as an example, here is copy:\r\n\r\n\t    NioManager.instance().init();\r\n\r\n\t    final String host = \"www.google.com\";\r\n\t    final int port = 80;\r\n\t    final NioBuffer nioBuffer = new NioBuffer();\r\n\t    NioHandler handler = new NioHandler() {\r\n\t        @Override\r\n\t        public void onConnected(NioTcpClient client) throws Exception {\r\n\t            log.info(\"{} was connected\", client);\r\n\t            String getRequest = \"GET / HTTP/1.0\\r\\nHost: \" + host + \"\\r\\nUser-Agent: NioClient 1.0\\r\\n\\r\\n\";\r\n\t            byte[] data = getRequest.getBytes(Charset.forName(\"UTF-8\"));\r\n\t            client.write(data);\r\n\t        }\r\n\r\n\t        @Override\r\n\t        public void onDisconnected(NioTcpClient client) throws Exception {\r\n\t            log.info(\"{} was disconnected\", client);\r\n\t            byte[] bytes = nioBuffer.readBytes(nioBuffer.readableByteSize());\r\n\t            String str = new String(bytes, Charset.forName(\"UTF-8\"));\r\n\t            nioBuffer.clear();\r\n\t            log.info(str);\r\n\t            NioManager.instance().shutdown();\r\n\t        }\r\n\r\n\t        @Override\r\n\t        public void onDataReceived(NioTcpClient client, ByteBuffer buffer)\r\n\t                throws Exception {\r\n\t            log.info(\"received {} bytes by {}\", buffer.remaining(), client);\r\n\t            nioBuffer.addBuffer(buffer);\r\n\t        }\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onExceptionHappened(NioTcpClient client, Exception e)\r\n\t\t\t\t\tthrows Exception {\r\n\t\t\t\tlog.error(\"\", e);\r\n\t            client.disconnect();\r\n\t\t\t}\r\n\r\n\t    };\r\n\t    NioTcpClient socket = new NioTcpClient(handler);\r\n\t    socket.connect(host, port);\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}